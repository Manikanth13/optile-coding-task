{"version":3,"sources":["components/Header.js","utils.js","components/DayCard.js","components/Chart.js","components/HomePage.js","action/index.js","App.js","serviceWorker.js","reducer/index.js","store/index.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","variant","PureComponent","convertTemp","temp","type","Number","toFixed","DayCard","this","props","segmentData","classes","onDayClick","selected","Grid","item","xs","Card","style","backgroundColor","CardActionArea","onClick","CardContent","component","className","childItem","averagetemp","day","withStyles","theme","flexGrow","display","Chart","getCategoriesAndValues","segments","categories","map","segment","time","dt_txt","split","values","main","loadChart","chart","Highcharts","title","text","yAxis","min","xAxis","series","colorByPoint","data","showInLegend","updateChart","update","toUpperCase","id","HomePage","handleChange","e","value","target","setState","prevState","tempType","loadNext","offset","selectedIndex","loadPrev","onSelectedDay","index","state","limit","selectedDay","weatherData","hasNext","length","Container","maxWidth","height","FormControl","RadioGroup","aria-label","onChange","row","FormControlLabel","control","Radio","label","paddingLeft","paddingRight","IconButton","float","disabled","color","ArrowBack","fontSize","size","ArrowForward","padding","container","alignContent","justify","spacing","slice","daySegment","key","connect","Types","FETCH_WEATHER_INFO_SUCCESS","FETCH_WEATHER_INFO_FAILURE","SWITCH_TYPE","fetchDataSuccess","payload","city","count","dispatch","fetch","then","res","json","response","groupedData","list","forEach","dateStr","existingSegment","find","d","push","reduce","acc","groupWeatherData","catch","err","App","fetchData","isLoading","ACTIONS","Boolean","window","location","hostname","match","initialState","appReducer","action","middlewares","logger","thunk","configureStore","appStore","createStore","reducer","applyMiddleware","REDUX_INITIAL_DATA","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ff05c7c.chunk.js","sourcesContent":["import React, { PureComponent} from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nclass Header extends PureComponent {\n    render() {\n        return (\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        Weather App\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}\n\nexport default Header;","export const convertTemp = (temp, type) => {\n    if (type === 'c') {\n        return Number((((temp - 32) * 5) / 9).toFixed(2));\n    }\n    return temp;\n};\n\nexport const groupWeatherData = list => {\n    const data = [];\n    (list || []).forEach(item => {\n        const segment = {};\n        const dateStr = item.dt_txt.split(' ')[0];\n        const existingSegment = data.find(d => d.day === dateStr);\n        if (existingSegment) {\n            existingSegment.segments.push(item);\n            existingSegment.averagetemp = (existingSegment.segments.reduce((acc, segment) => (acc + segment.main.temp), 0) / existingSegment.segments.length).toFixed(2);\n        } else {\n            segment.day = dateStr;\n            segment.segments = [item];\n            data.push(segment);\n        }\n    });\n\n    return data;\n}","import React, { PureComponent } from 'react';\nimport { Grid, Card, Typography, CardContent, CardActionArea } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { convertTemp } from '../utils';\n\nconst styles = theme => ({\n    item: {\n        flexGrow: 1,\n    },\n    childItem: {\n        display: 'inline-flex'\n    }\n})\n\nclass DayCard extends PureComponent {\n    render() {\n        const { segmentData, classes, onDayClick, selected, type } = this.props;\n        return (\n            <Grid item xs={4}>\n                <Card style={{backgroundColor: selected ? '#bbdefb' : 'white'}}>\n                    <CardActionArea onClick={onDayClick}>\n                        <CardContent>\n                            <Typography component=\"div\" className={classes.item}>\n                                <Typography component=\"div\" className={classes.childItem}>Temp:&nbsp;</Typography>\n                                <Typography component=\"div\" className={classes.childItem}>{convertTemp(segmentData.averagetemp, type)}</Typography>\n                            </Typography>\n                            <Typography component=\"div\" className={classes.item}>\n                                <Typography component=\"div\" className={classes.childItem}>Date:&nbsp;</Typography>\n                                <Typography component=\"div\" className={classes.childItem}>{segmentData.day}</Typography>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Grid>\n        )\n    }\n}\n\nexport default withStyles(styles)(DayCard);","import React, { PureComponent } from 'react';\nimport Highcharts from 'highcharts';\nimport { convertTemp } from '../utils';\n\nclass Chart extends PureComponent {\n    componentDidMount() {\n        this.loadChart();\n    }\n\n    componentDidUpdate() {\n        this.updateChart();\n    }\n\n    getCategoriesAndValues = () => {\n        const { segments, type } = this.props;\n        const categories = segments.map(segment => {\n            const time = segment.dt_txt.split(' ')[1].split(':')[0];\n            return `${time}:00 ${Number(time) < 12 ? 'AM' : 'PM'}`;\n        });\n        const values = segments.map(segment => convertTemp(segment.main.temp, type));\n        return { categories, values };\n    }\n\n    loadChart = () => {\n        const { categories, values } = this.getCategoriesAndValues();\n\n        this.chart = Highcharts.chart('chart-container', {\n\n            title: {\n                text: 'Weather Forecast'\n            },\n\n            yAxis: {\n                min: 0,\n                title: {\n                    text: 'Temperature (F)'\n                }\n            },\n        \n            xAxis: {\n                title: {\n                    text: 'Time (Hours)'\n                },\n                categories,\n            },\n        \n            series: [{\n                type: 'column',\n                colorByPoint: true,\n                data: values,\n                showInLegend: false\n            }]\n        \n        });\n    }\n\n    updateChart() {\n        const { categories, values } = this.getCategoriesAndValues();\n        this.chart.update({\n            yAxis: {\n                min: 0,\n                title: {\n                    text: `Temperature (${this.props.type.toUpperCase()})`\n                }\n            },\n            xAxis: {\n                categories,\n            },\n            series: [{\n                type: 'column',\n                colorByPoint: true,\n                data: values,\n                showInLegend: false\n            }]\n        });\n    }\n\n    render() {\n        return (\n            <div id=\"chart-container\"></div>\n        )\n    }\n}\n\nexport default Chart;","import React, { PureComponent } from 'react';\nimport { Container, Typography, FormControl, RadioGroup, FormControlLabel, Radio, IconButton, Grid, Paper } from '@material-ui/core';\nimport { ArrowForward, ArrowBack } from '@material-ui/icons';\nimport { connect } from 'react-redux';\nimport DayCard from './DayCard';\nimport Chart from './Chart';\n\nexport class HomePage extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            limit: 3,\n            offset: 0,\n            tempType: 'f',\n            selectedDay: null,\n            selectedIndex: 0,\n        }\n    }\n    handleChange = (e) => {\n        const { value } = e.target;\n        this.setState(prevState => ({\n            ...prevState,\n            tempType: value\n        }));\n    };\n\n    loadNext = () => {\n        this.setState(prevState => ({\n            offset: prevState.offset + 3,\n            selectedIndex: prevState.offset + 3,\n        }));\n    };\n\n    loadPrev = () => {\n        this.setState(prevState => ({\n            ...prevState,\n            offset: prevState.offset - 3,\n            selectedIndex: prevState.offset - 3,\n        }));\n    };\n\n    onSelectedDay = (index) => {\n        this.setState(prevState => ({\n            ...prevState,\n            selectedIndex: prevState.offset + index\n        }))\n    }\n\n    render() {\n        const { weatherData } = this.props;\n        const { limit, offset, tempType, selectedIndex } = this.state;\n        const hasNext = (weatherData.length - 3) > offset;\n        const segments = weatherData[selectedIndex].segments;\n        return (\n            <Container maxWidth=\"md\">\n                <Typography component=\"div\" style={{ backgroundColor: '#f5f5f5', height: '100vh' }}>\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup aria-label=\"temperature\" value={tempType} onChange={this.handleChange} row>\n                            <FormControlLabel value=\"c\" control={<Radio />} label=\"Celcius\" />\n                            <FormControlLabel value=\"f\" control={<Radio />} label=\"Fahrenheit\" />\n                        </RadioGroup>\n                    </FormControl>\n                    <div style={{paddingLeft: 30, paddingRight: 30}}>\n                        <IconButton style={{float: 'left'}} disabled={offset === 0} onClick={this.loadPrev} aria-label=\"Previous\" limit=\"medium\" color=\"primary\">\n                            <ArrowBack fontSize=\"large\" />\n                        </IconButton>\n                        <IconButton style={{float: 'right'}} disabled={!hasNext} onClick={this.loadNext} aria-label=\"Next\" size=\"medium\" color=\"primary\">\n                            <ArrowForward fontSize=\"large\" />\n                        </IconButton>\n                    </div>\n                    <div style={{padding: 30}}>\n                        <Grid container alignContent=\"center\" justify=\"center\" spacing={3}>\n                            {weatherData.slice(offset, limit + offset).map((daySegment, index) => (\n                                <DayCard key={index} selected={(selectedIndex - offset) === index} onDayClick={() => this.onSelectedDay(index)} segmentData={daySegment} type={tempType} />\n                            ))}\n                        </Grid>\n                    </div>\n                    <div>\n                        <Chart segments={segments} type={tempType}/>\n                    </div>\n                </Typography>\n            </Container>\n        );\n    };\n};\n\nconst mapStateToProps = state => ({\n    weatherData: state.weatherData\n});\n\nexport default connect(mapStateToProps, null)(HomePage);","import { groupWeatherData } from \"../utils\";\n\nconst api = \"https://api.openweathermap.org/data/2.5/forecast\";\nconst APPID = '75f972b80e26f14fe6c920aa6a85ad57';\n\nconst Types = {\n    FETCH_WEATHER_INFO_SUCCESS: 'FETCH_WEATHER_INFO_SUCCESS',\n    FETCH_WEATHER_INFO_FAILURE: 'FETCH_WEATHER_INFO_FAILURE',\n    SWITCH_TYPE: 'SWITCH_TYPE',\n};\n\n\nconst fetchDataSuccess = (data) => ({\n    type: Types.FETCH_WEATHER_INFO_SUCCESS,\n    payload: data\n});\n\nconst fetchDataFailed = () => ({\n    type: Types.FETCH_WEATHER_INFO_FAILURE\n});\n\nconst changeTemperatureView = (type) => ({\n    type: Types.SWITCH_TYPE,\n    payload: type\n});\n\nconst fetchData = (city, count) => {\n    return (dispatch) => {\n        return fetch(`${api}?q=${city}&APPID=${APPID}&cnt=${count}`)\n        .then(res => res.json())\n        .then(response => {\n            const groupedData = groupWeatherData(response.list);\n            dispatch(fetchDataSuccess(groupedData))\n        })\n        .catch(err => {\n            // handle error scenario\n        });\n    }\n};\n\nexport default {\n    fetchData,\n    fetchDataSuccess,\n    fetchDataFailed,\n    changeTemperatureView,\n    Types\n};\n","import React, { PureComponent, Fragment } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport HomePage from './components/HomePage';\nimport { connect } from 'react-redux';\nimport ACTIONS from './action';\nimport { Typography } from '@material-ui/core';\n\nexport class App extends PureComponent {\n    componentDidMount() {\n      // can have a select box to set city\n      this.props.fetchData && this.props.fetchData('Munich,de', 40);\n    };\n\n    render() {\n      const {isLoading} = this.props;\n        return (\n            <div className=\"App\">\n                {isLoading ? (\n                  <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', height: '100vh', padding: 100 }}>Loading...</Typography>\n                ) : (\n                  <Fragment>\n                      <Header />\n                      <HomePage />\n                  </Fragment>\n                )}\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.isLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchData: (city, count) => dispatch(ACTIONS.fetchData(city, count))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ACTIONS from '../action';\n\nconst initialState = {\n    isLoading: true,\n    weatherData: []\n}\n\nconst appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTIONS.Types.FETCH_WEATHER_INFO_SUCCESS:\n                return {...state, isLoading: false, weatherData: action.payload};\n        default:\n            return state;\n    }\n};\n\nexport default appReducer;","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducer';\n\nconst middlewares = [logger, thunk];\n\n\nfunction configureStore(initialState) {\n    const store = createStore(reducer, initialState, applyMiddleware(...middlewares));\n    return store;\n}\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport configureStore from './store';\n\nconst appStore = configureStore(window.REDUX_INITIAL_DATA);\n\nReactDOM.render(<ReduxProvider store={appStore}><App /></ReduxProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}